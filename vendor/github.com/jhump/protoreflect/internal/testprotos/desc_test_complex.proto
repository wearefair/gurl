syntax = "proto2";

package foo.bar;

option go_package = "github.com/jhump/protoreflect/internal/testprotos";

import "google/protobuf/descriptor.proto";

message Simple {
	optional string name = 1;
	optional uint64 id = 2;
}

extend google.protobuf.ExtensionRangeOptions {
	optional string label = 20000;
}

message Test {
	optional string foo = 1 [json_name = "|foo|"];
	repeated int32 array = 2;
	optional Simple s = 3;
	repeated Simple r = 4;
	map<string, int32> m = 5;

	optional bytes b = 6 [default = "\0\1\2\3\4\5\6\7fubar!"];

	extensions 100 to 200;

	extensions 300 to 350, 500 to 550 [(label) = "jazz"];

	message Nested {
		extend google.protobuf.MessageOptions {
			optional int32 fooblez = 20003;
		}
		message _NestedNested {
			enum EEE {
				OK = 0;
				V1 = 1;
				V2 = 2;
				V3 = 3;
				V4 = 4;
				V5 = 5;
				V6 = 6;
			}
			option (fooblez) = 10101;
			extend Test {
				optional string _garblez = 100;
			}
			option (rept) = { foo: "goo" [foo.bar.Test.Nested._NestedNested._garblez]: "boo" };
			message NestedNestedNested {
				option (rept) = { foo: "hoo" [Test.Nested._NestedNested._garblez]: "spoo" };

				optional Test Test = 1;
			}
		}
	}
}

extend google.protobuf.MessageOptions {
	repeated Test rept = 20002;
	optional Test.Nested._NestedNested.EEE eee = 20010;
	optional Another a = 20020;
}

message Another {
    option (.foo.bar.rept) = { foo: "abc" s < name: "foo", id: 123 >, array: [1, 2 ,3], r:[<name:"f">, {name:"s"}, {id:456} ]};
    option (foo.bar.rept) = { foo: "def" s { name: "bar", id: 321 }, array: [3, 2 ,1], r:{name:"g"} r:{name:"s"}};
    option (rept) = { foo: "def" };
    option (eee) = V1;
	option (a) = { fff: OK };
	option (a).test = { m { key: "foo" value: 100 } m { key: "bar" value: 200 }};
	option (a).test.foo = "m&m";
	option (a).test.s.name = "yolo";
    option (a).test.s.id = 98765;
    option (a).test.array = 1;
    option (a).test.array = 2;

    optional Test test = 1;
    optional Test.Nested._NestedNested.EEE fff = 2 [default = V1];
}

message Validator {
	optional bool authenticated = 1;

	enum Action {
		LOGIN = 0;
		READ = 1;
		WRITE = 2;
	}
	message Permission {
		optional Action action = 1;
		optional string entity = 2;
	}

	repeated Permission permission = 2;
}

extend google.protobuf.MethodOptions {
	optional Validator validator = 12345;
}

service TestTestService {
	rpc UserAuth(Test) returns (Test) {
		option (validator) = {
			authenticated: true
			permission: {
				action: LOGIN
				entity: "client"
			}
		};
	}
	rpc Get(Test) returns (Test) {
		option (validator) = {
			authenticated: true
			permission: {
				action: READ
				entity: "user"
			}
		};
	}
}
